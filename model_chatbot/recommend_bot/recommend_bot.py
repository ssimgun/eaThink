import re
import pandas as pd
import numpy as np
import pymysql
from sqlalchemy import create_engine
from haversine import haversine_vector, Unit

# 서울시 지역명 태그 
seoul_regions = ['서울', '강남구', '강동구', '강북구', '강서구', '관악구', '광진구', '구로구', '금천구', '노원구', '도봉구', '동대문구', '동작구', '마포구', '서대문구', '서초구', '성동구', '성북구', '송파구', '양천구', '영등포구', '용산구', '은평구', '종로구', '중구', '중랑구']

# 음식 태그
tag_to_id = {
    '햄버거': 1, '피자': 2, '패밀리레스토랑': 3, '패스트푸드': 4, '스테이크하우스': 5,
    '씨푸드': 6, '뷔페': 7, '돈가스': 8, '유로피언레스토랑': 9, '퓨전레스토랑': 10,
    '베이커리/제과점': 11, '카페/커피숍': 12, '컵케익': 13, '도넛': 14, '브런치': 15,
    '아이스크림': 16, '간식/디저트': 17, '카페테리아/식당': 18, '애견카페': 19, '북카페': 20,
    '한정식': 21, '해물요리': 22, '설렁탕/곰탕/도가니탕': 23, '라면': 24, '칼국수/국수/우동/쫄면': 25,
    '찌개/전골/국/탕': 26, '전/모듬전/빈대떡': 27, '비빔밥/돌솥밥/쌈밥': 28, '해장국/국밥': 29, 
    '순대국': 30, '감자탕': 31, '철판구이/볶음밥': 32, '장어구이': 33, '낙지': 34, 
    '회': 35, '전복': 36, '홍어': 37, '냉면': 38, '순두부': 39, '죽': 40, 
    '분식': 41, '삼겹살/목살': 42, '돼지갈비/갈매기살': 43, '불고기/갈비살/차돌박이': 44, 
    '꽃등심/등심/육회': 45, '오리훈제/구이/로스/탕': 46, '닭갈비/닭발': 47, '삼계탕/백숙/찜닭': 48, 
    '치킨/훈제': 49, '전골/수육': 50, '양/대창/막창': 51, '족발/보쌈': 52, 
    '일본음식/초밥': 53, '중국음식': 54, '카레': 55, '샤브샤브': 56, '덮밥': 57,
    '쌀국수': 58, '이자카야': 59, '남미음식': 60, '인도음식': 61, '동남아음식': 62, 
    '세계음식': 63, '소주': 64, '막걸리/동동주': 65, '포장마차': 66, '실내포장마차': 67, 
    '사케': 68, '맥주/호프': 69, '와인': 70, '바': 71, '칵테일': 72, '호텔바': 73, '전라도음식': 74
}

# 음식 태그 동의어 사전
synonym_dict = {
    '햄버거': ['버거', '빅맥', '와퍼', 'burger', 'hamburger', '버거킹', '맥도날드', 'KFC', '롯데리아'],
    '피자': ['핏자', 'pizza'],
    '패밀리레스토랑': ['패밀리 식당', '아웃백', '레스토랑', '패밀리 레스토랑'],
    '패스트푸드': ['정크푸드', '정크 푸드', '패스트 푸드'],
    '스테이크하우스': ['스테이크', '스테이크 하우스', '스테끼'],
    '뷔페': ['무한리필', '부페'],
    '돈가스': ['돈까스', '카츠', '가츠'],
    '유로피언레스토랑': ['유럽', '프랑스', '이탈리아', '스페인', '프렌치', '이탈리안', '유러피안', '유러피언', '유로피안', '유로피언', '파스타', '스파게티'],
    '퓨전레스토랑': ['퓨전', '다국적'],
    '베이커리/제과점': ['빵집', '제과점', '베이커리'],
    '카페/커피숍': ['커피', '카페', '스타벅스', '이디야'],
    '컵케익': ['컵케이크', '케이크'],
    '도넛': ['크리스피크림', '도너츠', '도나스'],
    '브런치': ['브런치 카페', '모닝', '포케', '샐러드', '샌드위치', '에그베네딕트'],
    '아이스크림': ['젤라또', '소프트 아이스크림', '얼음과자', '빙과'],
    '간식/디저트': ['디저트', '스낵', '간식', '단 음식', '후식', '주전부리', '달다구리'],
    '카페테리아/식당': ['식당', '카페테리아', '구내식당', '밥집'],
    '애견카페': ['반려동물', '애완', '강아지 카페', '고양이', '펫'],
    '북카페': ['책카페', '독서 카페', '도서 카페', '조용한 카페', '스터디'],
    '한정식': ['한식', '정식', '상차림', '한상차림'],
    '해물요리': ['해물', '조개구이', '조개찜', '아구찜', '아귀찜', '해물탕', '해물찜'],
    '설렁탕/곰탕/도가니탕': ['설렁탕', '곰탕', '도가니탕', '곰국', '설렁탕집'],
    '라면': ['라멘'],
    '칼국수/국수/우동/쫄면': ['칼국수', '국수', '우동', '쫄면'],
    '찌개/전골/국/탕': ['찌개', '전골', '국', '탕', '매운탕'],
    '전/모듬전/빈대떡': ['전', '모듬전', '빈대떡', '부침', '지짐'],
    '비빔밥/돌솥밥/쌈밥': ['비빔밥', '돌솥밥', '쌈밥', '비빔', '돌솥', '쌈'],
    '해장국/국밥': ['해장국', '국밥'],
    '순대국': ['순대국밥', '순대', '순대국', '머릿고기'],
    '감자탕': ['뼈다귀해장국', '감자탕'],
    '철판구이/볶음밥': ['철판구이', '볶음밥', '야끼', '철판'],
    '장어구이': ['장어', '아나고'],
    '회': ['횟집', '세꼬시'],
    '홍어': ['홍탁', '삼합'],
    '분식': ['떡볶이', '순대', '김밥', '튀김', '떡순튀', '김밥천국'],
    '삼겹살/목살': ['삼겹살', '목살', '항정살'],
    '돼지갈비/갈매기살': ['돼지갈비', '갈매기살'],
    '불고기/갈비살/차돌박이': ['불고기', '차돌박이', '갈비살', '차돌', '소갈비'],
    '꽃등심/등심/육회': ['꽃등심', '등심', '육회', '소고기'],
    '오리훈제/구이/로스/탕': ['오리훈제', '오리구이', '로스', '오리탕', '오리고기'],
    '닭갈비/닭발': ['닭갈비', '닭발'],
    '삼계탕/백숙/찜닭': ['삼계탕', '백숙', '찜닭', '닭백숙'],
    '치킨/훈제': ['치킨', '프라이드', '후라이드', '치느님', '훈제'],
    '전골/수육': ['전골', '수육'],
    '양/대창/막창': ['양곱창', '대창', '막창', '곱창'],
    '족발/보쌈': ['족발', '보쌈', '막국수'],
    '일본음식/초밥': ['초밥', '스시', '사시미', '일식', '일본 요리', '일본음식'],
    '중국음식': ['짜장면', '짬뽕', '중식', '중국집'],
    '카레': ['커리', '하이라이스'],
    '샤브샤브': ['월남쌈', '샤부샤부'],
    '덮밥': ['카츠동', '규동', '사케동', '도시락'],
    '쌀국수': ['pho', '월남국수', '퍼'],
    '이자카야': ['일본식 주점', '일본주점'],
    '남미음식': ['브라질', '멕시칸', '타코', '브리또'],
    '인도음식': ['인도식', '탄두리'],
    '동남아음식': ['베트남 음식', '태국 음식', '팟타이', '똠얌꿍'],
    '세계음식': ['월드 푸드', '인터내셔널', '세계'],
    '소주': ['쐬주'],
    '막걸리/동동주': ['막걸리', '동동주', '전통주'],
    '포장마차': ['포차', '야시장', '노점'],
    '실내포장마차': ['실내포차', '한잔', '한 잔'],
    '사케': ['사케', '일본술', '청주', '일본 주류'],
    '맥주/호프': ['맥주', '호프', '펍', 'pub'],
    '칵테일': ['칵테일', '믹솔로지'],
    '호텔바': ['호텔', '럭셔리 바', '라운지']
}

# 서울시 지역명 동의어 사전
region_synonym_dict = {
    '서울': ['수도', '특별시'],
    '강남구': ['강남', '신사동', '압구정', '삼성동', '논현동'],
    '강동구': ['강동', '천호', '둔촌동', '길동', '상일동'],
    '강북구': ['강북', '수유동', '미아동', '번동', '우이동'],
    '강서구': ['강서', '화곡동', '방화동', '염창동', '가양동'],
    '관악구': ['관악', '신림동', '봉천동', '남현동'],
    '광진구': ['광진', '건대', '구의동', '자양동', '화양동'],
    '구로구': ['구로', '신도림', '개봉동', '고척동', '오류동'],
    '금천구': ['금천', '가산동', '독산동', '시흥동'],
    '노원구': ['노원', '중계동', '상계동', '월계동'],
    '도봉구': ['도봉', '쌍문동', '방학동', '창동'],
    '동대문구': ['동대문', '회기동', '휘경동', '이문동', '청량리'],
    '동작구': ['동작', '사당동', '상도동', '흑석동', '대방동'],
    '마포구': ['마포', '홍대', '상수동', '서교동', '합정동'],
    '서대문구': ['서대문', '신촌', '연희동', '홍은동', '북아현동'],
    '서초구': ['서초', '양재', '반포', '방배동', '잠원동'],
    '성동구': ['성동', '왕십리', '성수동', '행당동', '금호동'],
    '성북구': ['성북', '정릉동', '돈암동', '길음동', '월곡동'],
    '송파구': ['송파', '잠실', '석촌', '방이동', '문정동'],
    '양천구': ['양천', '목동', '신월동', '신정동'],
    '영등포구': ['영등포', '여의도', '당산동', '문래동', '양평동'],
    '용산구': ['용산', '이태원', '한남동', '용문동', '효창동'],
    '은평구': ['은평', '불광동', '응암동', '녹번동', '진관동'],
    '종로구': ['종로', '삼청동', '인사동', '혜화동', '가회동'],
    '중구': ['중구', '명동', '을지로', '신당동', '황학동'],
    '중랑구': ['중랑', '면목동', '상봉동', '중화동', '묵동']
}

# 여러 태그를 포함하는 포괄적 동의어 사전
broader_synonym_dict = {
    '고기': ['삼겹살/목살', '돼지갈비/갈매기살', '불고기/갈비살/차돌박이', '꽃등심/등심/육회', '오리훈제/구이/로스/탕', '닭갈비/닭발', '양/대창/막창', '전골/수육', '족발/보쌈'],
    '고깃집': ['삼겹살/목살', '돼지갈비/갈매기살', '불고기/갈비살/차돌박이', '꽃등심/등심/육회', '오리훈제/구이/로스/탕', '닭갈비/닭발', '양/대창/막창'],
    '갈비': ['돼지갈비/갈매기살', '불고기/갈비살/차돌박이'],
    '해산물': ['씨푸드', '해물요리', '장어구이', '낙지', '회', '전복', '홍어'],
    '면요리': ['라면', '칼국수/국수/우동/쫄면', '냉면', '쌀국수'],
    '국물': ['설렁탕/곰탕/도가니탕', '찌개/전골/국/탕', '해장국/국밥', '순대국', '감자탕', '순두부', '죽'],
    '간식': ['베이커리/제과점', '카페/커피숍', '컵케익', '도넛', '브런치', '아이스크림', '간식/디저트'],
    '디저트': ['베이커리/제과점', '카페/커피숍', '컵케익', '도넛', '브런치', '아이스크림', '간식/디저트'],
    '한식': [
    '한정식', '해물탕/해물요리/꽃게', '설렁탕/곰탕/도가니탕', '라면', 
    '칼국수/국수/우동/쫄면', '찌개/전골/국/탕', '전/모듬전/빈대떡',
    '비빔밥/돌솥밥/쌈밥', '해장국/국밥', '순대국', '감자탕', 
    '철판구이/볶음밥', '장어구이/곰장어', '낙지', '회', 
    '전복', '홍어', '냉면', '순두부', '죽', 
    '분식', '전라도음식'],
    '일식': ['일본음식/초밥', '라면', '샤브샤브', '이자카야'],
    '양식': ['유로피언레스토랑', '스테이크하우스', '피자', '햄버거', '패밀리레스토랑', '패스트푸드'],
    '퓨전요리': ['퓨전레스토랑', '세계음식', '남미음식', '인도음식', '동남아음식'],
    '주류': ['소주', '막걸리/동동주', '사케', '맥주/호프', '와인', '바', '칵테일', '호텔바'],
    '술': ['소주', '막걸리/동동주', '사케', '맥주/호프', '와인', '바', '칵테일', '호텔바'],    
    '포장마차': ['포장마차', '실내포장마차'],
    '카페': ['카페/커피숍', '애견카페', '북카페', '베이커리/제과점'],
    '덮밥': ['덮밥', '철판구이/볶음밥'],
    '볶음밥' : ['덮밥', '철판구이/볶음밥']
}

# 사용자 입력에서 음식 태그 찾기
def find_food_tag(user_input, synonym_dict, broader_synonym_dict):
    for broader_tag, related_tags in broader_synonym_dict.items():
        if broader_tag in user_input:
            return related_tags
        
    for tag, synonyms in synonym_dict.items():
        for synonym in synonyms:
            if synonym in user_input:
                return [tag]
    return None

# 사용자 입력에서 지역 태그 찾기
def find_region_tag(user_input, region_synonym_dict):
    for region, synonyms in region_synonym_dict.items():
        for synonym in synonyms:
            if synonym in user_input:
                return region
    return None

# 리뷰 점수 가중치 계산 함수
def calculate_review_weight(review_score):
    return review_score / 1000

# 추천 시스템 함수(실행 모듈)
def recommend_restaurant(user_input, user_id, user_location):
    # DB 연결 설정
    con = pymysql.connect(host='192.168.40.65', user='JWShon', password='jinwoo1228', db='project', charset='utf8', cursorclass=pymysql.cursors.DictCursor)
    engine = create_engine('mysql+pymysql://JWShon:jinwoo1228@192.168.40.65/project')

    # 음식점 데이터 쿼리
    store_query = """
        SELECT name, number_address, x, y, tag1, tag2, tag3, final_score
        FROM restaurants
    """
    # 사용자 음식 선호도 쿼리
    user_food_pref_query = """
        SELECT user_id, food_id, preference 
        FROM user_food_preferences
        WHERE user_id = %s
    """

    # 사용자 입력에서 태그 분석
    food_tag_list = find_food_tag(user_input, synonym_dict, broader_synonym_dict)
    region_tag = find_region_tag(user_input, region_synonym_dict)

    # 음식점 데이터 가져오기
    store_data = pd.read_sql(store_query, engine)

    # 지역 태그가 없으면 사용자 위치 기준 500m 내 음식점 필터링
    if region_tag is None:
        store_locations = list(zip(store_data['y'], store_data['x']))
        distances = haversine_vector(user_location, store_locations, Unit.METERS, comb=True)
        store_data['distance'] = distances
        filtered_stores = store_data[store_data['distance'] <= 500]
    else:
        # 지역 태그가 있는 경우, number_address 컬럼에 해당 지역 태그가 포함된 음식점 필터링
        filtered_stores = store_data[store_data['number_address'].str.contains(region_tag, na=False)]
        store_locations = list(zip(filtered_stores['y'], filtered_stores['x']))
        distances = haversine_vector(user_location, store_locations, Unit.METERS, comb=True)
        filtered_stores = filtered_stores.copy()
        filtered_stores.loc[:, 'distance'] = distances

    # 음식 태그가 있는 경우, 해당 태그를 가진 음식점 필터링
    if food_tag_list:
        filtered_stores = filtered_stores[filtered_stores['tag1'].isin(food_tag_list) |
                                          filtered_stores['tag2'].isin(food_tag_list) |
                                          filtered_stores['tag3'].isin(food_tag_list)]

    # 사용자 선호도 가져오기
    user_food_preference = pd.read_sql(user_food_pref_query, engine, params=(user_id,))

    # 음식점 점수 계산
    restaurant_scores = []
    for _, store in filtered_stores.iterrows():
        food_tags = [store['tag1'], store['tag2'], store['tag3']]
        score = 0
        for tag in food_tags: # tag 1~3에 대한 사용자의 선호도 합산
            if pd.notna(tag): # tag 존재 시에만 
                tag_id = tag_to_id.get(tag) # 한글 태그 숫자로 변환
                if tag_id: # 변환 태그 존재시에만
                    pref = user_food_preference[user_food_preference['food_id'] == tag_id]['preference'].sum()
                    score += pref
        review_weight = calculate_review_weight(store['final_score']) # 리뷰 점수 가중치
        final_score = score * review_weight # 최종 점수 = 선호도 합 * 리뷰 점수 가중치
        restaurant_scores.append({
            'store_name': store['name'],
            'address' : store['number_address'],
            'tags' : food_tags,
            'final_score': final_score,
            'distance': store['distance'] if 'distance' in store else None,
            'review_score': store['final_score']
        })

    # 점수에 따라 음식점 정렬 및 추천
    restaurant_scores = sorted(restaurant_scores, key=lambda x: x['final_score'], reverse=True)
    ordered_df = pd.DataFrame(restaurant_scores)
    recommended_df = ordered_df[:5]
    store_names = recommended_df['store_name'].tolist()
    result = ", ".join(store_names)
    
    # DB 연결 종료
    engine.dispose()

    return result

def test_genarate(user_input, x, y, id):
    return "고담 롯데몰 김포공항점, 스트릿 롯데몰 김포공항점, 콴안다오 롯데몰김포공항점, 도레도레 김포롯데몰"